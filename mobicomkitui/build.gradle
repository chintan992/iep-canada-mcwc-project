apply plugin: 'com.android.library'

ext {
    defaultCompileSdkVersion = 27
    defaultTargetSdkVersion = 27
    defaultBuildToolVersion = "27.0.3"
    defaultSupportLibVersion = "27.1.1"
    defaultGlideVersion = "4.7.1"
    defaultFirebaseVersison = "17.3.0"
    defaultGoogleMapsVersion = "15.0.1"
    defaultLocationServicesVersion = "15.0.1"
    defaultConstraintLayoutVersion = "1.1.2"
    defaultCircleImageViewVersion = "2.2.0"
    defaultImageCropperVersion = "2.7.0"
}

android {
    compileSdkVersion rootProject.hasProperty("compileSdkVersion") ? rootProject.compileSdkVersion : defaultCompileSdkVersion

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion rootProject.hasProperty("targetSdkVersion") ? rootProject.targetSdkVersion : defaultTargetSdkVersion
        versionCode 1
        versionName "5.47"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    lintOptions {

        abortOnError false

    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "com.android.support:support-v4:${rootProject.hasProperty("supportLibVersion") ? rootProject.supportLibVersion : defaultSupportLibVersion}"
    api "com.google.firebase:firebase-messaging:${rootProject.hasProperty("firebaseVersison") ? rootProject.firebaseVersison : defaultFirebaseVersison}"
    api "com.google.android.gms:play-services-maps:${rootProject.hasProperty("googleMapsVersion") ? rootProject.googleMapsVersion : defaultGoogleMapsVersion}"
    api "com.google.android.gms:play-services-location:${rootProject.hasProperty("locationServicesVersion") ? rootProject.locationServicesVersion : defaultLocationServicesVersion}"
    implementation "de.hdodenhof:circleimageview:${rootProject.hasProperty("circleImageViewVersion") ? rootProject.circleImageViewVersion : defaultCircleImageViewVersion}"
    implementation "com.android.support:design:${rootProject.hasProperty("supportLibVersion") ? rootProject.supportLibVersion : defaultSupportLibVersion}"
    implementation "com.theartofdev.edmodo:android-image-cropper:${rootProject.hasProperty("imageCropperVersion") ? rootProject.imageCropperVersion : defaultImageCropperVersion}"
    implementation "com.github.bumptech.glide:glide:${rootProject.hasProperty("glideVersion") ? rootProject.glideVersion : defaultGlideVersion}"
    implementation "com.android.support:cardview-v7:${rootProject.hasProperty("supportLibVersion") ? rootProject.supportLibVersion : defaultSupportLibVersion}"
    implementation "com.android.support.constraint:constraint-layout:${rootProject.hasProperty("constraintLayoutVersion") ? rootProject.constraintLayoutVersion : defaultConstraintLayoutVersion}"
    api project(':mobicomkit')
    //Note: use this for customization
    //api 'com.applozic.communication.message:mobicomkit:5.47' //Note: use this in case customization is not required
}
/* ext {
    // Where you will see your artifact in Bintray's web interface
    // The "bintrayName" should match the name of the Bintray repro.
    bintrayRepo = 'maven'
    bintrayName = 'applozic-communication-uiwidget'

    // Maven metadata
    publishedGroupId = 'com.applozic.communication.uiwidget'
    libraryName = 'mobicomkitui'
    // Save yourself a head ache, and set this equal to the name of the Android Studio library
    // module. The artifact name needs to match the name of the library.
    artifact = 'mobicomkitui'

    libraryDescription = 'Applozic Communication UI Widget'
    libraryVersion = '5.47'

    developerId = 'devashish'
    developerName = 'Applozic'
    developerEmail = 'devashish.mamgain@gmail.com'
}



apply from: 'https://raw.githubusercontent.com/attwellBrian/JCenter/master/installv1.gradle'

apply plugin: 'com.jfrog.bintray'

version = libraryVersion

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    failOnError false // add this line

    source = android.sourceSets.main.java.srcDirs
    //source = android.sourceSets.main.allJava
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

// Bintray
Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

bintray {
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")

    configurations = ['archives']
    pkg {
        repo = bintrayRepo
        name = bintrayName
        desc = libraryDescription
        publish = true
        publicDownloadNumbers = true
        version {
            desc = libraryDescription
            // Optional. The passphrase for GPG signing'
            // gpg {
            //    sign = true //Determines whether to GPG sign the files. The default is false
            //    passphrase = properties.getProperty("bintray.gpg.password")
            //}
        }
    }
}*/

